'name': 'TOML'
'scopeName': 'source.toml'
'fileTypes': ['toml']
'firstLineMatch': '''(?xi)
  # Emacs modeline
  -\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
    toml
  (?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
  |
  # Vim modeline
  (?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s*set?\\s))(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:](?:filetype|ft|syntax)\\s*=
    toml
  (?=\\s|:|$)
'''
'patterns': [
  {
    'match': '(#).*$'
    'name': 'comment.line.number-sign.toml'
    'captures':
      '1': 'name': 'punctuation.definition.comment.toml'
  }
  {
    'match': '(?:^\\s*)((\\[\\[)[^\\]]+(\\]\\]))'
    'captures':
      '1': 'name': 'entity.name.section.table.array.toml'
      '2': 'name': 'punctuation.definition.table.array.begin.toml'
      '3': 'name': 'punctuation.definition.table.array.end.toml'
  }
  {
    'match': '(?:^\\s*)((\\[)[^\\]]+(\\]))'
    'captures':
      '1': 'name': 'entity.name.section.table.toml'
      '2': 'name': 'punctuation.definition.table.begin.toml'
      '3': 'name': 'punctuation.definition.table.end.toml'
  }
  {
    'match': '([A-Za-z0-9_-]+)\\s*(=)' # IMPORTANT: Do not replace with [\\w-].  \\w includes more than just a-z.
    'captures':
      '1': 'name': 'variable.other.key.toml'
      '2': 'name': 'keyword.operator.assignment.toml'
  }
  {
    'match': '((")([\\w\\s-]*)("))\\s*(=)' # We use \\w here because quoted keys allow for a much wider variety.
    'captures':
      '1': 'name': 'string.quoted.double.toml'
      '2': 'name': 'punctuation.definition.string.begin.toml'
      '3': 'name': 'variable.other.key.toml'
      '4': 'name': 'punctuation.definition.string.end.toml'
      '5': 'name': 'keyword.operator.assignment.toml'
  }
  {
    'match': "((')([\\w\\s-]*)('))\\s*(=)" # We use \\w here because quoted keys allow for a much wider variety.
    'captures':
      '1': 'name': 'string.quoted.single.toml'
      '2': 'name': 'punctuation.definition.string.begin.toml'
      '3': 'name': 'variable.other.key.toml'
      '4': 'name': 'punctuation.definition.string.end.toml'
      '5': 'name': 'keyword.operator.assignment.toml'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.toml'
    'end': '"""'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.toml'
    'name': 'string.quoted.double.block.toml'
    'patterns': [
      'match': '\\\\[btnfr"\\\\]|\\\\u[A-Fa-f0-9]{4}|\\\\U[A-Fa-f0-9]{8}|\\\\$'
      'name': 'constant.character.escape.toml'
    ]
  }
  {
    'begin': "'''"
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.toml'
    'end': "'''"
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.toml'
    'name': 'string.quoted.single.block.toml'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.toml'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.toml'
    'name': 'string.quoted.double.toml'
    'patterns': [
      'match': '\\\\[btnfr"\\\\]|\\\\u[A-Fa-f0-9]{4}|\\\\U[A-Fa-f0-9]{8}'
      'name': 'constant.character.escape.toml'
    ]
  }
  {
    'begin': "'"
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.toml'
    'end': "'"
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.toml'
    'name': 'string.quoted.single.toml'
  }
  {
    'match': 'true'
    'name': 'constant.language.boolean.true.toml'
  }
  {
    'match': 'false'
    'name': 'constant.language.boolean.false.toml'
  }
  {
    'match': '\\d{4}-\\d{2}-\\d{2}(?:(T)\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:(Z)|([+-])\\d{2}:\\d{2})?)?'
    'name': 'constant.numeric.date.toml'
    'captures':
      '1': 'name': 'keyword.other.time.toml'
      '2': 'name': 'keyword.other.offset.toml'
      '3': 'name': 'keyword.other.offset.toml'
  }
  {
    'match': '[+-]?(0|[1-9]\\d*)(_\\d+)*((\\.\\d+)(_\\d+)*)?([eE][+-]?\\d+(_\\d+)*)?'
    'name': 'constant.numeric.toml'
  }
]
